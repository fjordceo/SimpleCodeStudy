namespace Episode052;

/*
 
  Ссылочные (reference) и значимые (value) типы в C#
  Стэк потока (stack) и хип(куча) (heap) в C#
  КЛЮЧЕВАЯ ТЕМА!!!!!!!!!!

 */

class Program
{
    static void Main(string[] args)
    {
        // Стэк и куча - это две разные области памяти, которые используются для хранения данных в C#.
        
        // Стэк (stack) - это область памяти, которая используется для хранения значимых типов (value types).
        // Небольшой объем. Дефолтное значение памяти для стэка каждого потока - 1 МБ.
        // Значимые типы - это типы данных, которые хранят свои значения непосредственно в памяти.
        // Например: int, float, double, char и т.д.
        // Все типы данных которые являются структурами (struct) и enum'ами также являются значимыми типами.
        // Переменные прекращают свое существование, когда выходят из области видимости (scope).
        
        // Куча (heap) - это область памяти, которая используется для хранения ссылочных типов (reference types).
        // Большой объем. Объем памяти для кучи зависит от доступной оперативной памяти и настроек среды выполнения.
        // Ссылочные типы - это типы данных, которые хранят ссылки на объекты в памяти.
        // Например: string, class, array, delegate и т.д.
        // Все типы данных которые являются классами (class) и интерфейсами (interface) также являются ссылочными типами.
        // Ссылочные типы хранятся в куче, а ссылки на них - в стэке.
        // Переменные ссылочных типов могут существовать до тех пор, пока на них есть ссылки. 
        
        int example = 10; // Значимый тип, хранится в стэке
        System.Int32 c = 20; // То же самое что и выше, но с использованием полного имени типа. Это структура!
        // ConsoleKey; // Для примера, это перечисление (enum), которое также является значимым типом.
        
        Random random = new Random(); // Ссылочный тип, хранится в куче

        int b = 1;
        
        Foo(b);

        Console.WriteLine($"Значение a после вызова метода Foo: {b}");

        int []a = new int[1];
        a[0] = 1;

        Bar(a);

        Console.WriteLine($"Значение первого элемента массива: {a[0]}");




    }
    
    static void Foo(int value)
    {
        value = 5;
        // Здесь value - это копия переменной a, которая была передана в метод Foo.
        // Изменение value не влияет на переменную a, которая находится в стэке.
        // Данные значения value пропадают после выхода из метода Foo, так как они хранятся в стэке.
    }

    static void Bar(int [] arr)
    {
        arr[0] = 5;
    }
}